buildscript {
    repositories {
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.5.1.RELEASE")
        classpath 'org.hidetake:gradle-ssh-plugin:1.1.3'
    }
}

allprojects {
    ext.version_base = '1.0.0-SNAPSHOT'
    version = version_base
}

subprojects {

    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'maven'
    apply plugin: 'eclipse'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'maven-publish'
    apply plugin: 'org.hidetake.ssh'


    group = 'uk.ac.ebi.subs'

    dependencies {
        compile("org.springframework.boot:spring-boot-devtools")
    }

    configurations.all {
        resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
    }

    task wrapper(type: Wrapper) {
        gradleVersion = '3.3'
    }

    repositories {
        mavenLocal()
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
        mavenCentral()
    }

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    task sourceJar(type: Jar) { from sourceSets.main.allJava }

    task bootJar(type: BootRepackage) {
    }

    artifacts {
        archives jar
        archives sourceJar
    }

    processResources {
        filesMatching('application.properties') {
            expand(project.properties)
        }
    }

    processTestResources {
        filesMatching('application.properties') {
            expand(project.properties)
        }
    }

    task('externalCiTest', type: Test) {
        useJUnit {
            excludeCategories 'uk.ac.ebi.subs.RabbitMQDependentTest', 'uk.ac.ebi.subs.BioSamplesDependentTest'
        }
        testLogging {
            exceptionFormat = 'full'
        }
    }

    configure(externalCiTest) {
        group = "verification"
        description = 'Run tests appropriate for our external CI environment'
    }

    test {
        testLogging {
            exceptionFormat = 'full'
        }
    }

    /*
    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
                artifact sourceJar { classifier "sources" } }
        }
        repositories {
            maven {
                if(project.version.endsWith('-SNAPSHOT')) {
                    url "http://ena-dev:8081/artifactory/libs-snapshot-local"
                } else {
                    url "http://ena-dev:8081/artifactory/libs-release-local"
                }
                if (project.hasProperty('artifactoryUsername') && project.hasProperty('artifactoryPassword')) {
                    credentials {
                        username artifactoryUsername
                        password artifactoryPassword
                    }
                }
            }
        }
    }
    */

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
                artifact sourceJar { classifier "sources" }
            }
        }
        repositories {
            maven {
                if (project.version.endsWith('-SNAPSHOT')) {
                    url "https://oss.sonatype.org/content/repositories/snapshots"
                } else {
                    url "https://oss.sonatype.org/service/local/staging/deploy/maven2"
                }
                if (project.hasProperty('ossrhUsername') && project.hasProperty('ossrhPassword')) {
                    credentials {
                        username ossrhUsername
                        password ossrhPassword
                    }
                }
            }
        }
    }

    uploadArchives {
        repositories {
            mavenDeployer {

                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2") {
                    if (project.hasProperty('ossrhUsername') && project.hasProperty('ossrhPassword')) {
                        authentication(userName: ossrhUsername, password: ossrhPassword)
                    }
                }

                snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots") {
                    if (project.hasProperty('ossrhUsername') && project.hasProperty('ossrhPassword')) {
                        authentication(userName: ossrhUsername, password: ossrhPassword)
                    }

                }

                pom.project {
                    packaging 'jar'
                    // optionally artifactId can be defined here
                    url 'https://github.com/EMBL-EBI-SUBS'

                    scm {
                        url 'https://github.com/EMBL-EBI-SUBS'
                    }

                    licenses {
                        license {
                            name 'The Apache License, Version 2.0'
                            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }

                    developers {
                        developer {
                            id 'neilg'
                            name 'Neil Goodgame'
                            email 'neilg@ebi.ac.uk'
                        }
                    }
                }
            }
        }
    }

    ssh.settings {
        user = 'sub_adm'
    }

    if (project.hasProperty('sshKeyFile')) {
        ssh.settings.identity = new File(sshKeyFile)
    }

    if (project.hasProperty('sshPassphrase')) {
        ssh.settings.passphrase = sshPassphrase
    }

    task printJarName {
        doLast {
            println "$jar.archivePath.name"
        }

    }

    task printJarFullPath {
        doLast {
            println "$jar.archivePath.absolutePath"
        }
    }

    remotes {
        staging {
            role('staging')
            host = 'mac-subs-002'
        }
    }

    remotes {
        agent {
            role('agent')
            host = 'mac-subs-004'
        }
    }

    task deployJar(type: SshTask, dependsOn: 'assemble') {
        doLast {
            def deployHome = "/data/" + project.name;
            File jarDeployDir = new File(deployHome,"jar")

            ssh.run {
                session(remotes.staging) {
                    println "Creating $project.name directory in /data"
                    execute "/data/create_dirs.sh $project.name", ignoreError: false
                    println "Uploading jar $jar.archivePath.name to $jarDeployDir area on $remote"
                    put(jar.archivePath.absolutePath, jarDeployDir.absolutePath)
                    println "creating symbolic link to $jar.archiveName"
                    def result = execute "ln -s -f $jarDeployDir/$jar.archiveName $jarDeployDir/$jar.baseName" + ".jar", ignoreError: true
                    println result
                    execute "chmod u+x $jarDeployDir/*", ignoreError: false

                }
            }
        }
        ssh.settings {
            knownHosts = allowAnyHosts
        }
    }

    task deployJarToAgentHost(type: SshTask, dependsOn: 'assemble') {
        doLast {
            def deployHome = "/data/" + project.name;
            File jarDeployDir = new File(deployHome,"jar")

            ssh.run {
                session(remotes.agent) {
                    println "Creating $project.name directory in /data"
                    execute "/data/create_dirs.sh $project.name", ignoreError: false
                    println "Uploading jar $jar.archivePath.name to $jarDeployDir area on $remote"
                    put(jar.archivePath.absolutePath, jarDeployDir.absolutePath)
                    println "creating symbolic link to $jar.archiveName"
                    def result = execute "ln -s -f $jarDeployDir/$jar.archiveName $jarDeployDir/$jar.baseName" + ".jar", ignoreError: true
                    println result
                    execute "chmod u+x $jarDeployDir/*", ignoreError: false
                }
            }
        }
        ssh.settings {
            knownHosts = allowAnyHosts
        }
    }

    test {
        testLogging.showStandardStreams = true
    }

}